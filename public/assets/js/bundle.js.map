{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/Todo.ts","src/ts/index.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","TodoData","id","title","done","date","this","Todo","prototype","todoDataInit","todoList","push","Date","renderEditForm","event","target","HTMLButtonElement","getAttribute","editPopup","document","querySelector","classList","remove","add","btnUpdate","setAttribute","forEach","item","editItem","value","render","_this","list","innerHTML","find","createDomElements","undefined","li","insertAdjacentHTML","appendChild","createElement","edit","complete","create","todoItem","now","toString","filter","update","itemTobeUpdated","map","setTaskComplete","self","Array","btnAddItem","addEventListener","bind","contains","console","log"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,MAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,MAAAO,KAAA,mBAAAF,EAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,gB,gBCEA,IAAAK,EAME,SAAYC,EAAYC,EAAeC,EAAeC,GACpDC,KAAKJ,GAAKA,EACVI,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,EACZE,KAAKD,KAAOA,GAIhBE,GA8DEA,EAAAC,UAAAC,aAAA,WACEH,KAAKI,SAASC,KAAK,IAAIV,EAAS,IAAK,uBAAuB,EAAO,IAAIW,OACvEN,KAAKI,SAASC,KAAK,IAAIV,EAAS,IAAK,wBAAwB,EAAO,IAAIW,OACxEN,KAAKI,SAASC,KAAK,IAAIV,EAAS,IAAK,uBAAuB,EAAO,IAAIW,OACvEN,KAAKI,SAASC,KAAK,IAAIV,EAAS,IAAK,uBAAuB,EAAO,IAAIW,QAIzEL,EAAAC,UAAAK,eAAA,SAAeC,GACL,IAKJZ,EALIa,EAAWD,EAALC,OACRA,aAAkBC,oBAKpB,QADAd,EAAKa,EAAOE,aAAa,cAKzB,QADAC,EAAYC,SAASC,cAAc,kBAErCF,EAAUG,UAAUC,OAAO,QAC3BJ,EAAUG,UAAUE,IAAI,SAItB,QADAC,EAAYL,SAASC,cAAc,iBAErCI,EAAUC,aAAa,UAAWvB,GAGpCI,KAAKI,SAASgB,QAAQ,SAAAC,GACpB,IACMC,EADFD,EAAKzB,KAAOA,GAEV,QADA0B,EAAWT,SAASC,cAAgC,iBAEtDQ,EAASC,MAAQF,EAAKxB,YAS9BI,EAAAC,UAAAsB,OAAA,WAAA,IAAAC,EAAAzB,KACoB,OAAdA,KAAK0B,OACP1B,KAAK0B,KAAKC,UAAY,IAGxB3B,KAAKI,SAASwB,KAAK,SAACP,GAClBI,EAAKI,kBAAkBR,EAAKzB,SAETkC,IAAfT,EAAKxB,MACP4B,EAAKM,GAAGC,mBAAmB,aAAcX,EAAKxB,OAE9C4B,EAAKM,GAAGC,mBAAmB,aAAc,IAGvCX,EAAKvB,MACP2B,EAAKM,GAAGhB,UAAUE,IAAI,QAGN,OAAdQ,EAAKC,MACPD,EAAKC,KAAKO,YAAYR,EAAKM,OASjC9B,EAAAC,UAAA2B,kBAAA,SAAkBjC,GAChBI,KAAK+B,GAAKlB,SAASqB,cAAoB,MACvClC,KAAKmC,KAAOtB,SAASqB,cAAwB,UAC7ClC,KAAA,OAAca,SAASqB,cAAwB,UAC/ClC,KAAKoC,SAAWvB,SAASqB,cAAwB,UAEjDlC,KAAKmC,KAAKpB,UAAUE,IAAI,YACxBjB,KAAA,OAAYe,UAAUE,IAAI,cAC1BjB,KAAKoC,SAASrB,UAAUE,IAAI,gBAE5BjB,KAAA,OAAYmB,aAAa,UAAWvB,GACpCI,KAAKmC,KAAKhB,aAAa,UAAWvB,GAClCI,KAAKoC,SAASjB,aAAa,UAAWvB,GAEtCI,KAAKmC,KAAKR,UAAY,OACtB3B,KAAA,OAAY2B,UAAY,SACxB3B,KAAKoC,SAAST,UAAY,WAE1B3B,KAAK+B,GAAGE,YAAYjC,KAAA,QACpBA,KAAK+B,GAAGE,YAAYjC,KAAKmC,MACzBnC,KAAK+B,GAAGE,YAAYjC,KAAKoC,WAM3BnC,EAAAC,UAAAmC,OAAA,WACE,IAAIC,EAAWzB,SAASC,cAAgC,SAGnDwB,MAAAA,GAAAA,EAAUf,QAEfvB,KAAKI,SAASC,KAAK,IAAIV,EACrBW,KAAKiC,MAAMC,WACXF,EAASf,OACT,EACA,IAAIjB,OAIFe,OADAA,EAAOR,SAASC,cAAgC,WAChDO,EAAME,QACRF,EAAKE,MAAQ,IAGfvB,KAAKwB,WAOPvB,EAAAC,UAAAc,OAAA,SAAOR,GAEG,IAMJZ,EANIa,EAAWD,EAALC,OACRA,aAAkBC,oBAKpBd,EAAKa,EAAOE,aAAa,WAG7BX,KAAKI,SAAWJ,KAAKI,SAASqC,OAAO,SAAApB,GACnC,GAAIA,EAAKzB,KAAOA,EACd,OAAOyB,IAIXrB,KAAKwB,WAIPvB,EAAAC,UAAAwC,OAAA,SAAOlC,GAEG,IAKJZ,EAKA+C,EAVIlC,EAAWD,EAALC,OACRA,aAAkBC,oBAIpBd,EAAKa,EAAOE,aAAa,WAGzB,QADAW,EAAWT,SAASC,cAAgC,iBAGpD6B,EAAkBrB,EAASC,MAE/BvB,KAAKI,SAAWJ,KAAKI,SAASwC,IAAI,SAAAvB,GAKhC,OAJIA,EAAKzB,KAAOA,IACdyB,EAAI,MAAYsB,GAGXtB,IAIL,QADAT,EAAYC,SAASC,cAAc,kBAErCF,EAAUG,UAAUC,OAAO,QAC3BJ,EAAUG,UAAUE,IAAI,SAG1BjB,KAAKwB,YAIPvB,EAAAC,UAAA2C,gBAAA,SAAgBrC,GACR,IAIFZ,EAJEa,EAAWD,EAALC,OACNA,aAAkBC,oBAGpBd,EAAKa,EAAOE,aAAa,WAE7BX,KAAKI,SAAWJ,KAAKI,SAASqC,OAAO,SAAApB,GAKnC,OAJIA,EAAKzB,KAAOA,IACdyB,EAAI,MAAW,GAGVA,IAGTrB,KAAKwB,WAETvB,GAjPE,SAAAA,IAAA,IAAAwB,EAAAzB,MAVAA,KAAA8C,KAAa9C,MAWN0B,KAAOb,SAASC,cAA2B,eAChDd,KAAKI,SAAW,IAAI2C,MAEpB/C,KAAK+B,GAAKlB,SAASqB,cAAoB,MACvClC,KAAKmC,KAAOtB,SAASqB,cAAwB,UAC7ClC,KAAA,OAAca,SAASqB,cAAwB,UAC/ClC,KAAKoC,SAAWvB,SAASqB,cAAwB,UAEjDlC,KAAKG,eACLH,KAAKwB,SAGL,IAAIwB,EAAanC,SAASC,cAAc,iBACpC,OAASkC,GACXA,EAAWC,iBAAiB,QAASjD,KAAKqC,OAAOa,KAAKlD,OAGpDkB,EAAYL,SAASC,cAAc,eACnC,OAASI,GACXA,EAAU+B,iBAAiB,QAASjD,KAAK0C,OAAOQ,KAAKlD,OAIvDa,SAASoC,iBAAiB,QAAS,SAAAzC,GACzB,IAAAC,EAAWD,EAALC,OACRA,aAAkBC,oBAKpBD,EAAOM,UAAUoC,SAAS,eAC5B1B,EAAKT,OAAOR,GAIVC,EAAOM,UAAUoC,SAAS,aAC5B1B,EAAKlB,eAAeC,GAIlBC,EAAOM,UAAUoC,SAAS,iBAC5B1B,EAAKoB,gBAAgBrC,MAwM7BlB,EAAA,QAAeW,G,oDC5QJ,IAFXjB,EAAA,UAEe,SACfoE,QAAQC,IAAI","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// TODO: https://medium.com/free-code-camp/crud-operations-using-vanilla-javascript-cd6ee2feff67\n\nclass TodoData {\n  id: string;\n  title: string;\n  done: boolean;\n  date: Date;\n\n  constructor(id: string, title: string, done: boolean, date: Date) {\n    this.id = id;\n    this.title = title;\n    this.done = done;\n    this.date = date;\n  }\n}\n\nclass Todo {\n  // referencing this keyword\n  self: Todo = this;\n\n  list: HTMLElement | null;\n  todoList: Array<TodoData>;\n\n  li: HTMLElement;\n  edit: HTMLElement;\n  delete: HTMLElement;\n  complete: HTMLElement;\n\n  constructor() {\n    this.list = document.querySelector<HTMLElement>(\".list-items\");\n    this.todoList = new Array<TodoData>();\n\n    this.li = document.createElement<'li'>('li');\n    this.edit = document.createElement<'button'>('button');\n    this.delete = document.createElement<'button'>('button');\n    this.complete = document.createElement<'button'>('button');\n\n    this.todoDataInit();\n    this.render();\n\n    // 新しい項目の追加用イベントリスナ\n    let btnAddItem = document.querySelector('.btn-add-item');\n    if (null !== btnAddItem) {\n      btnAddItem.addEventListener('click', this.create.bind(this));\n    }\n\n    let btnUpdate = document.querySelector('.btn-update');\n    if (null !== btnUpdate) {\n      btnUpdate.addEventListener('click', this.update.bind(this));\n    }\n\n    // クリック時の処理\n    document.addEventListener('click', event => {\n      const { target } = event;\n      if (!(target instanceof HTMLButtonElement)) {\n        return; // or throw new TypeError();\n      }\n\n      // 削除ボタンクリック時\n      if (target.classList.contains('btn-delete')) {\n        this.remove(event);\n      }\n\n      // フォーム編集ボタンクリック時\n      if (target.classList.contains('btn-edit')) {\n        this.renderEditForm(event);\n      }\n\n      // タスク完了ボタンをクリック時\n      if (target.classList.contains('btn-complete')) {\n        this.setTaskComplete(event);\n      }\n    });\n  }\n\n  /**\n   * モックデータの初期化処理\n   */\n  todoDataInit(): void {\n    this.todoList.push(new TodoData('1', 'This is first title', false, new Date()));\n    this.todoList.push(new TodoData('2', 'This is second title', false, new Date()));\n    this.todoList.push(new TodoData('3', 'This is third title', false, new Date()));\n    this.todoList.push(new TodoData('4', 'This is forth title', false, new Date()));\n  }\n\n  // レンダーされてるフォームの編集\n  renderEditForm(event: Event): void {\n    const { target } = event;\n    if (!(target instanceof HTMLButtonElement)) {\n      return; // or throw new TypeError();\n    }\n\n    let id = target.getAttribute('data-id');\n    if (null === id) return;\n\n\n    let editPopup = document.querySelector('.edit-popup');\n    if (null !== editPopup) {\n      editPopup.classList.remove('hide');\n      editPopup.classList.add('show');\n    }\n\n    let btnUpdate = document.querySelector('.btn-update');\n    if (null !== btnUpdate) {\n      btnUpdate.setAttribute('data-id', id);\n    }\n\n    this.todoList.forEach(item => {\n      if (item.id === id) {\n        let editItem = document.querySelector<HTMLInputElement>('.edit-item');\n        if (null !== editItem) {\n          editItem.value = item.title;\n        }\n      }\n    });\n  }\n\n  /**\n   * TODOリストのデータレンダリング\n   */\n  render(): void {\n    if (this.list !== null) {\n      this.list.innerHTML = '';\n    }\n\n    this.todoList.find((item: TodoData) => {\n      this.createDomElements(item.id);\n\n      if (item.title !== undefined) {\n        this.li.insertAdjacentHTML('afterbegin', item.title);\n      } else {\n        this.li.insertAdjacentHTML('afterbegin', \"\");\n      }\n\n      if (item.done) {\n        this.li.classList.add('done');\n      }\n\n      if (this.list !== null) {\n        this.list.appendChild(this.li);\n      }\n    });\n  }\n\n  /**\n   * DOM要素の作成ステップ（CRUDのC!）\n   * @param id\n   */\n  createDomElements(id: string): void {\n    this.li = document.createElement<'li'>('li');\n    this.edit = document.createElement<'button'>('button');\n    this.delete = document.createElement<'button'>('button');\n    this.complete = document.createElement<'button'>('button');\n\n    this.edit.classList.add('btn-edit');\n    this.delete.classList.add('btn-delete');\n    this.complete.classList.add('btn-complete');\n\n    this.delete.setAttribute('data-id', id);\n    this.edit.setAttribute('data-id', id);\n    this.complete.setAttribute('data-id', id);\n\n    this.edit.innerHTML = 'Edit';\n    this.delete.innerHTML = 'Delete';\n    this.complete.innerHTML = 'Complete';\n\n    this.li.appendChild(this.delete);\n    this.li.appendChild(this.edit);\n    this.li.appendChild(this.complete);\n  }\n\n  /**\n   * 新しい項目を作成（作成されたDOM要素を元に）\n   */\n  create(): void {\n    let todoItem = document.querySelector<HTMLInputElement>('.item');\n\n    // 項目名が無い場合は作成しない\n    if (!todoItem?.value) return;\n\n    this.todoList.push(new TodoData(\n      Date.now().toString(),\n      todoItem.value,\n      false,\n      new Date()\n    ));\n\n    let item = document.querySelector<HTMLInputElement>('.item');\n    if (item?.value) {\n      item.value = '';\n    }\n\n    this.render();\n  }\n\n  /**\n   * 項目の削除\n   * @param event\n   */\n  remove(event: Event): void {\n    // HTML Button Elementの継承関係では無いなら処理をしない\n    const { target } = event;\n    if (!(target instanceof HTMLButtonElement)) {\n      return; // or throw new TypeError();\n    }\n\n    // IDの取得\n    let id = target.getAttribute('data-id');\n\n    // 残したい要素だけ返す（削除ボタンと同じIDだったら返さない）\n    this.todoList = this.todoList.filter(item => {\n      if (item.id !== id) {\n        return item;\n      }\n    });\n\n    this.render();\n  }\n\n  // 更新\n  update(event: Event): void {\n    // TODO: 値が更新されないので修正する\n    const { target } = event;\n    if (!(target instanceof HTMLButtonElement)) {\n      return; // or throw new TypeError();\n    }\n\n    let id = target.getAttribute('data-id');\n\n    let editItem = document.querySelector<HTMLInputElement>('.edit-item');\n    if (null === editItem) return;\n\n    let itemTobeUpdated = editItem.value;\n\n    this.todoList = this.todoList.map(item => {\n      if (item.id === id) {\n        item['title'] = itemTobeUpdated;\n      }\n\n      return item;\n    });\n\n    let editPopup = document.querySelector('.edit-popup');\n    if (null !== editPopup) {\n      editPopup.classList.remove('show');\n      editPopup.classList.add('hide');\n    }\n\n    this.render();\n  }\n\n  // step to set task as complete\n  setTaskComplete(event: Event): void {\n    let { target } = event;\n    if (!(target instanceof HTMLButtonElement)) {\n      return;\n    }\n    let id = target.getAttribute('data-id');\n\n    this.todoList = this.todoList.filter(item => {\n      if (item.id === id) {\n        item['done'] = true;\n      }\n\n      return item;\n    });\n\n    this.render();\n  }\n}\nexport default Todo;\n","import Todo from './Todo';\n\nlet todo = new Todo;\nconsole.log(\"test\");\n"]}